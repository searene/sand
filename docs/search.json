[{"categories":null,"content":"Introduction to the Fermi Paradox The Fermi Paradox, proposed by renowned physicist Enrico Fermi, presents a profound contradiction between our astronomical observations and the expectation of alien life. The universe, vast and teeming with stars akin to our Sun, many orbited by potentially life-sustaining planets, stands in unsettling silence. Despite promising conditions and our advanced technological efforts to find extraterrestrial intelligence, we encounter nothing. Why, in a universe seemingly ripe for life, do we find no evidence of other civilizations? Could the answer lie in the complex interplay of biology and the evolution of life?\nOverview of Existing Hypotheses Several hypotheses attempt to explain this paradox:\nThe Rare Earth Hypothesis: This suggests that life-breeding environments are so restrictive and demanding that intelligent species are scarce in the universe. Consequently, the likelihood of such species developing space-exploration technology is low. We might, to some extent, be unique. Low Technology: We may be unable to detect signals from advanced civilizations due to our still-primitive technology. As our technology evolves, the silent universe might become bustling with signals. The Dark Forest: Drawing parallels from Earth’s history, where encounters between disparate civilizations often ended in disaster, this theory proposes that civilizations may choose to remain hidden, fearing other advanced species. This concept has inspired numerous science fiction works, including the famous “The Three-body Problem”. The Great Filter: This hypothesis posits that there’s a challenging evolutionary stage from pre-life to a galaxy-colonizing civilization. This barrier could be anything from the genesis of life to the transition from single-cell to multicellular organisms, or an as-yet-unknown future hurdle. If the Great Filter is behind us, it suggests our rarity; if ahead, it could mean advanced civilizations self-destruct before achieving interstellar contact. The Advancement of Technology Will Kill Space Exploration First I’ve long been intrigued by the Fermi Paradox, and while all aforementioned hypotheses are plausible, I propose a new one, an offshoot of the “Great Filter”: the advancement of technology might be the ultimate filter for intelligent species like ours.\nContrary to expectations, I’m not focusing on AI, despite its fascinating potential. AI alone won’t prevent species from exploring the universe. Were that the case, the universe should be teeming with intelligent robots, which it evidently isn’t.\nSo, what technology could deter us from space exploration? It might seem counterintuitive, but to understand this, we first need to examine our motivations for venturing into space:\nCuriosity: A fundamental trait of intelligence, driving us to seek knowledge about our universe, the origins of life, and celestial phenomena. Building Connection: The hope of discovering and connecting with other intelligent beings, not merely for scientific collaboration but to understand our place in the cosmos. Resource Search: Seeking new materials and energy sources, or even habitats for burgeoning populations. Conquest: Historically, a less-discussed motive, but the drive to dominate other species or territories has often fueled exploration. However, all these motivations are rooted in emotion: curiosity, fear of resource scarcity, the desire for a better life, or the urge to conquer.\nThis leads to an unconventional thought: What if intelligent species eventually transcend these emotions, such as the fear of death or insatiable desire? The assumption might seem abrupt, but it’s not simple. To explain, let’s delve into my worldview and the principles of Buddhism.\nMy Shift of Wordview Growing up, I was often told that the world is beautiful, a belief necessary to avoid a descent into negativity. However, it doesn’t seem to be the case for me, what with all the obstacles and harsh conditions in front of me. I’d always been wondering if there was anything wrong with me. This perspective shifted after encountering Jordan Peterson’s work, which emphasizes life’s inherent suffering and the importance of fighting back to make life bearable. He advocates for extensive reading, as wisdom can be found in the words of others.\nHis idea also aligns with the book called “The Road Less Traveled,” which states:\nLife is difficult. This is a great truth, one of the greatest truths. It is a great truth because once we truly see this truth, we transcend it. Once we truly know that life is difficult—once we truly understand and accept it—then life is no longer difficult. Because once it is accepted, the fact that life is difficult no longer matters.\nFrom my experience, this resonates in two aspects:\nLife is inherently difficult. Accepting and embracing this difficulty makes life easier. This view, while not universally accepted, resonates with many. For those who find life carefree or wonderful, I consider them fortunate.\nBuddha’s Worldview Before delving deep into my proposed Great Filter, I want to take a few minutes to talk about Buddha and his worldview. Budda may have nothing to do with aliens, but I think learning his worldview would help you better understand my idea presented later.\nBuddha, born over 2000 years ago under far harsher conditions than today, pondered the end of suffering. Unlike the common approach of fighting and striving to fulfill desires, Buddha proposed that suffering stems from desire. Eliminating desire, according to him, would lead to peace. Meditation, still practiced worldwide, was his method to achieve this tranquility.\nThus, we have two approaches to addressing life’s challenges:\nExternally, fighting to satisfy desires. That is what most people would choose instinctively. Internally, calming our hearts to let desires fade. That is what Buddha advocates. Often, we combine both two methods, striving until we must accept reality.\nBuddha concluded that perpetual happiness is unattainable through the first method. Even temporary successes are soon forgotten amidst life’s constant changes. For instance, the joy of a career promotion may be short-lived, replaced by anxieties about further advancement. This cycle of satisfying greed leads to fleeting happiness.\nBuddha focused on the second method, achieving peace through meditation. Regular practice, he taught, leads to true happiness that doesn’t rely on external stimuli and safeguards against life’s hardships. This approach, even in our technologically advanced society, has calmed many.\nCalm Down the Future So, how does this relate to aliens? The theory I propose connects Buddha’s teachings with the Great Filter: Aliens might have perished upon reaching an epiphany. Realizing the pointlessness of external conquests and relentless technological pursuit, they might have turned inward, focusing on spiritual and mental development akin to Buddhism. This shift likely reduced their inclination for interstellar exploration and expansion.\nAdvanced alien civilizations might have achieved an enlightenment-like understanding, deeming material pursuits and cosmic expansion irrelevant. Their technologies, rather than for exploration, would sustain their civilizations in balance and self-sufficiency. This paradigm shift could account for the lack of observable extraterrestrial life.\nFurthermore, if this inward turn is a common evolutionary path, the Great Filter might not be a devastating event but a philosophical and cultural redirection. The cosmic silence might stem not from the scarcity of intelligent life but from their choice for introspective existence, minimizing their observable presence. Just like a lot of people choose not to climb the career ladder, that’s not because they are weak and incapable of doing this, but because they have higher intelligence than most people to choose the path that suits them, instead of just following the instinct coming from genes.\nSome people may doubt this proposition. After all, many on Earth already prioritize inner peace over external demands. Yet, our technological progress continues unabated, evident in lunar landings and Mars missions, with interstellar travel on the horizon. We are not stopping at all. So, what’s the disconnect?\nIt lies in the advancement of other fields, including biology. Even though a lot of people nowadays have realized that incessant desires and pursuits are bringing pain to their lives, even though they want to achieve peace and stop chasing, their genes are hard to change. They have no way to do that. Imagine a future where we can self-modify: enhancing health, strength, and intelligence. But ultimate satisfaction remains elusive. Some might choose to “calm” themselves biologically, achieving meditative peace directly.\nSuch individuals, experiencing the ultimate enlightenment, might lose the drive for procreation. If more and more people choose to do this, the world’s population will decrease gradually, and, eventually, the scientific community will lack enough talented people to continue the space exploration ambition.\nCritics of this theory may argue that curiosity and the exploratory drive are intrinsic to intelligent life. They may contend that inner peace wouldn’t extinguish the thirst for knowledge or exploration. They believe that technological advancements, especially in space travel, might unveil unknowns like new life forms, resources, or physics, fueling further exploration despite philosophical shifts.\nHowever, for the biologically modified, traditional motivations like curiosity or survival might become irrelevant. Extensive modifications could fundamentally alter emotional and motivational frameworks, rendering traditional drivers of human behavior obsolete.\nCaveats Do notice this article doesn’t posit that medication would lead to the extinction of individuals. I don’t have the fortune to reach enlightenment through medication personally, so I’m incapable of informing others what people would do at that stage. Medication and Buddha are only used metaphorically here to tell the user the consequences of changing ourselves. However, I believe that one day, our biological technology could be so advanced that we might be able to modify ourselves, including our emotions, our ambitions, our desires and our goals in this world, something that is even far-fetching in the eyes of Buddha. At that time, some people may choose to decrease their desires to the minimum in order to live a better life. When most people choose to do this, we will no longer have enough ambitious people to develop interstellar technologies. What would you say about that world? Are we still humans if that really happens? Is it the destiny of all the intelligent species? I don’t know, but I’m sure the future will give the homo sapiens an answer.\n","description":"","tags":null,"title":"Biology May Be the Great Filter: Rethinking the Fermi Paradox","uri":"/posts/biology-may-be-the-great-filter-rethinking-the-fermi-paradox/"},{"categories":null,"content":"Have you ever set a goal for how many books you want to read in a year? If so, you’re not alone. Many people set that goal and some even compete with each other to see who can read the most books. To achieve the goal or win the competition, a lot of people would read as fast as they can. Don’t understand what this paragraph is talking about? Just skip it, maybe I’ll know it after reading more. Not sure what the historical event mentioned in the book is about? Don’t bother with it, maybe I don’t need to know it. After all, finishing the book as quickly as I can is the most important thing, right?\nOf course it’s not right. You’ve set a trap and fallen into it. Admittedly, some people can read quickly without compromising comprehension and retention, which I think is perfectly fine, although I insist that it depends on which book you are reading and how much you know about the book’s topic before reading, even if the art of speed-reading is mastered. However, if you cannot read fast for some books, don’t force yourself to finish them as quickly as possible, it will surely ruin your reading experience and you will gain little to nothing from the book. In this case, you should read slowly - at least slow enough so that you are able to understand what the book is talking about. You need to make sure your comprehension level is above some certain threshold, otherwise, reading would be a waste of time for you.\nHow to Read Slowly? What? Do you need to learn how to read slowly? Isn’t it as simple as just being slow while reading? Well, it’s not that simple, at least you need to know what to focus on while reading. Here are 5 points I think are important to read slowly:\nPoint 1 - Re-read the parts you don’t understand two to three times\nWhen you encounter something you don’t understand in the book, try re-reading it and its surrounding texts about two to three times. Sometimes you will get the idea after reading it multiple times. If you’re still confused after re-reading, don’t push yourself too hard, just move on to the next part. Maybe you will understand it after getting more information from the remaining contents of the book.\nPoint 2 - Look up the contents that you don’t understand\nThis is more important and could bring a lot of knowledge and fun to you! For example, the book you are reading may mention a location somewhere in the world or a historical event that happened in the past. The book doesn’t care much about them so it doesn’t talk about them in detail. But what if you are interested? What if the book presumes some knowledge of those locations/events but you have none so you become more and more confused after reading more? Either case, you can stop for a while and search for those words online for more information. Let me give you two concrete examples. The first one is from a famous book called Guns, Germs, and Steel, the quotes are as follows:\nThe largest products of Polynesia were the immense stone structures of a few islands—the famous giant statues of Easter Island, the tombs of Tongan chiefs, the ceremonial platforms of the Marquesas, and the temples of Hawaii and the Societies. This monumental Polynesian architecture was obviously evolving in the same direction as the pyramids of Egypt, Mesopotamia, Mexico, and Peru. Naturally, Polynesia’s structures are not on the scale of those pyramids, but that merely reflects the fact that Egyptian pharaohs could draw conscript labor from a much larger human population than could the chief of any Polynesian island. Even so, the Easter Islanders managed to erect 30-ton stone statues—no mean feat for an island with only 7,000 people, who had no power source other than their own muscles.\nWhile reading this paragraph, a question may come to your mind: What is Mesopotamia? Mesopotamia seems to be a location, but where is it, and what happened in that place? At this point, you may become interested in that area, but if you ignore that interest and move on to the remainder of the book, you won’t lose much, it won’t even put any obstacle to the understanding of other contents in the book. But since your curiosity has been aroused, you can choose to look up Mesopotamia on the Internet.\nThe second example is about an article I read a few days before, called Why We Choose Liars as Leaders. To be frank, this is not a book, but I believe this method works for any reading material. Here is the quote from the post:\n“Similarly, sports fans are sometimes supportive of dishonest tactics that help their team win in competition. In 2007, the New England Patriots used dishonesty to their team advantage by illegally filming the coaches of opposing teams during football games (also known as the Spygate scandal). Although these actions were ultimately punished, at least some Patriots fans seemed to appreciate Coach Belichick’s commitment to winning, even by dishonest means,” the authors wrote.\nSomeone filmed the coaches of opposing teams during football games and got punished for that. I got the idea, but to be honest, I knew little about sports. Was it illegal to film the coaches of opposing teams during football games? Why? If you are reading the article and you have the same question, you can search it online. For me, I just dropped that question to New Bing Chat and let it answer my questions, it was much faster. The answer I got was as follows:\nAccording to the NFL rules, videotaping opposing coaches is not illegal in the NFL, per se; there are designated areas allowed by the league to do such taping. However, the Patriots were videotaping the Jets’ coaches from their own sideline which is not allowed. The NFL considered this a violation of the league’s policy on the use of equipment to obtain a competitive advantage. The NFL also prohibits teams from using any video recordings during games, but only between games. The Patriots claimed that they were unaware of this rule and that they only used the tapes for post-game analysis.\nNow I got it! Notice that not knowing this doesn’t prevent me from understanding the original article, but it’s nice to know.\nPoint 3 - Relate the book’s contents to your reality\nReading a book about how to lose weight? Try creating a plan for yourself while reading it. Reading a book about how to do test-driven development (TDD)? Walk through your projects in your mind and see how you can apply TDD to them. In short, do remember to relate the book’s contents to your reality when see fit, and let the book help you to live a better life or do a better job.\nPoint 4 - Always imagine you are going to retell the contents to another person\nI know a lot of people would forget the book’s contents just several days after finishing reading it. That is mainly due to the reason that you are always accepting the book’s contents passively. Do it actively and you will find the situation a lot better. But how to do it? We can draw support from Feynman’s learning technique: If you want to learn something, always try teaching it to another person.\nAs we are talking about books, you can try to retell the book’s contents to another person after finishing some parts of it. If you have no one to talk to, you can always imagine yourself doing so - retelling the book’s contents to yourself, and this process can happen while reading. For example, suppose you are reading Napoleon’s biography, the book must contain a lot of historical events driven by/related to Napoleon. After finishing reading one event, you can try retelling the story in your mind, it would be helpful for you to understand and memorize the story. If you can do this for each story, I believe you will remember most of them after finishing the book.\nPoint 5 - Use an electronic device\nThis point is an advice to help you read. I used to read on Kindle. When I encounter something I don’t understand, I just long-click the word and Kindle will search for it in the dictionary or Wikipedia. Later I replaced it with Boox’s E-ink devices, which are based on Android, meaning that I can search for anything on the Internet more conveniently. I can even use AI to answer my question if I want to. The same can be done on iPad or smartphones, only that the screen is not as comfortable as E-ink devices. Anyway, my point is, if you use an electronic device, searching for anything you don’t understand - which is mentioned in the previous point - would be much more convenient.\nHowever, I know that a lot of people prefer physical books to ebooks. Some of them just like the feel of physical papers, some of them like to draw on them, and some of them don’t want to be distracted by various apps on electronic devices. I totally get it. In that case, you can still read physical books, but take an electronic device with you. When you want to search for something, take out that device and let it do its job.\nThis point could be controversial because the use of electronic devices is usually distracting, which may ruin the reading experience. But I think it’s a double-edged sword, if you use the electronic device correctly, you will gain a lot more from it.\nPros and Cons of Reading Slowly Reading slowly has some advantages, and also some disadvantages. I’ll list some here to let you know this method better:\nPros\nBetter understanding: You reread the confusing part, you think back and forth whether the author is correct, and you’ve tried retelling the contents to another person. These techniques will surely bring you a better understanding of the book. You may even find the author is not entirely correct in some parts of the book. More gains: When you read slowly, you can choose to search for anything you are interested in yet not detailed by the book. We have already illustrated this in the second point of the previous section. When you do this, you are basically getting knowledge from two sources: one of them is the book itself, and the other would be the Internet. For the latter part, the book is just taken as an index. No matter whether your search is related to the book’s subject, you can always learn more. When you finish the book, you may end up learning more from outside of the book than its own contents. Better memorization: You spend more time relating the book’s contents to your real life, and you keep retelling the book’s story to yourself, all of them mean you will remember more contents from the book. Cons\nSlow reading: The first disadvantage is, of course, slow reading. You may only read 1/3 of the books than before. Actually, it might not be a disadvantage because it doesn’t mean you will gain less. You will probably learn more in this way albeit fewer books are read. Broken reading flow: You are constantly searching for something, retelling the contents, or trying to apply the techniques mentioned in the book. That means you won’t have a continuous reading flow when reading in this way. So just do it to an extent. For example, you may find a lot of interesting words in the book, but you should only choose a few to search for. If you search for too many words/events/places mentioned in the book, you are not reading the book, you are learning with the book as a dictionary index. It’s not necessarily a bad thing, but you will take a really long time to finish reading the book. Do notice the warning. Caveats Now you know the pros and cons of reading slowly, and you decide to give it a try, do notice that there are some caveats before applying it:\nSome books are not worth reading slowly. Slow reading takes time, so it’s imperative for you to pick a good book to read slowly. Don’t choose books of poor quality, especially those repeating their ideas over and over again. For those books, just reading the first few pages might be fine. Don’t read those books slowly, or you’ll waste a lot of time. Don’t be too slow. Everything comes at a cost, this also applies to slow-reading. If you find yourself taking too much time reading the same paragraph over and over again and haven’t learned much, you may want to try to speed up a little bit. The optimal reading speed can be obtained by trying to read slowly for two to three books. Pick the most comfortable speed for yourself. Summary I don’t know if you believe in the power of slow reading or not. I suggest you try this method even if you don’t believe it, at least you get the chance to know why it doesn’t work. No method applies to everybody, we all have our own particularities. But if slow reading works for me, it should work for some of you, too. So, just pick up a book and try it, maybe you will be amazed at how efficient slow reading could be!\n","description":"","tags":null,"title":"Read Slowly","uri":"/posts/read-slowly/"},{"categories":null,"content":"Nowadays TODO management apps are everywhere. From giant tech companies to emerging individual developers, everyone is creating TODO apps. Even some programming tutorials are about how to create a TODO app. The reason behind its popularity is obvious: almost everyone needs a TODO app. But unfortunately, only a small number of people know how to manage TODO tasks most efficiently.\nDo you know how to use a TODO app? Yes, of course you do. Just open a TODO app and add some TODO tasks to it. When one of them is finished, simply mark them as finished by clicking on the little square before each TODO item, it’s that simple, right? Yes, it could be that simple, you can manage your TODO tasks successfully in this way. But in my view, you missed an important part: you didn’t leave any notes for your TODO tasks.\nYou may have indulged deeply in your usual task-management process, to the extent that you may not even realize the note-taking part is important. So let me give you some examples. Suppose you created the following TODO task that you needed to finish today:\nSome users report that my app sometimes runs slow, I need to pinpoint the reason and fix it. After several hours of debugging and coding, you finally found the reason and fixed the problem. With fulfillment, you opened your TODO app again and marked it as finished. “Good job!” You said to yourself: “Nothing is wrong here”.\nBut really? In my view, you missed an important part: taking notes for the TODO tasks. You should write down how you find the reason for slowness, how you fixed it, and how to avoid similar problems in the future. What’s more, the notes are not taken after you solved the problem, they are taken along the process of solving it. Only in that way can you benefit from the notes most.\nAdvantages of Taking Notes for TODO Tasks Why should I take notes for my TODO tasks? Isn’t it enough to just finish the task in any way I want? After all, the most important thing is that I’ve completed the task, right? Well, maybe, but if you don’t take notes for those tasks, you may miss something. There are some clear benefits to taking notes for TODO tasks, to name a few:\nYou may encounter similar problems in the future. When that happens, you can refer to the current notes as a problem-solving template.\nYou may find some of those notes useful in the future, even if you won’t encounter similar problems again. For example, when solving the problem, you may learn some knowledge about CPU. You can just note them down. When you want to look up something you’ve learned about CPU several months later, you can search for “CPU” in the notes, and voila! That knowledge, along with the context - the slowness bug - pops up in front of you. Context-aware resources can help you learn more quickly and deeply.\nThe notes can guide you through solving the problem. This is the MOST IMPORTANT reason why you should take notes for your TODO task. As an old saying goes:\nWriting is not the artifact of thinking, it’s the actual thinking process.\nI believe you won’t solve the slowness problem immediately, at least not every time. You have to first reproduce the problem, then monitor all the relevant indicators to see if anything is abnormal. You may also need to adjust some parameters to see what happens. You can write all of them in the notes, and let the notes guide you through solving the problem. It’s just like solving a mathematical problem. Some problems are hard to solve. Whenever an idea comes to your mind, you need to write them down in a notebook, fiddle around with them for a while, and maybe after writing enough information can you find the right way to solve it.\nThat being said, do notice that some TODO tasks are not suitable for taking notes. Like “Remember to take out the garbage first thing in the morning” or “Finish the code for the sharing functionality of my app”. The former is too simple to note anything down, the latter is more about coding, which is usually done in an IDE, not much to be written down in the notes.\nLet’s take an example Now suppose you want to fix the problem mentioned above:\nSome users report that my app sometimes runs slow, I need to pinpoint the reason and fix it.\nTo do that, you first created a TODO task:\nTODO Some users report that my app sometimes runs slow, I need to pinpoint the reason and fix it.\nAfter creating the task, we are ready to get down to it. As everyone knows, the first thing we need to do when solving a problem would be to try reproducing it. So let’s add the following notes under the TODO task before doing anything.\nTODO Some users report that my app sometimes runs slow, I need to pinpoint the reason and fix it.\nNOTES First let's try reproducing the issue by following the user's guide:\nStart the app. Click on the \"START\" button to start processing. Observe the duration to be longer than expected. After writing those notes, you started the app, clicked on the button, and found the duration to be 30 seconds, longer than the expected 3 seconds. You also wrote that in the notes\nTODO Some users report that my app sometimes runs slow, I need to pinpoint the reason and fix it.\nNOTES First let's try reproducing the issue by following the user's guide:\nStart the app. Click on the \"START\" button to start processing. Observe the duration to be longer than expected. I've reproduced the issue, the duration is 30 seconds, longer than the expected 3 seconds.\nSo what’s the culprit? You remembered that the number of the app’s users has increased a lot in the past few days, but the number of backend servers for the app hasn’t changed for months. Maybe these servers cannot support that many users’ requests? That’s possible. To verify the assumption, we need to check the servers’ logs to see if the servers’ process duration has increased. As usual, add the action and the corresponding log to the notes:\nTODO Some users report that my app sometimes runs slow, I need to pinpoint the reason and fix it.\nNOTES First let's try reproducing the issue by following the user's guide:\nStart the app. Click on the \"START\" button to start processing. Observe the duration to be longer than expected. I've reproduced the issue, the duration is 30 seconds, longer than the expected 3 seconds.\nMaybe it's because the backend servers are overloaded. Need to check the servers' logs first.\nThe followings logs are taken from the server with IP 192.168.10.50:\n[2023-07-28 12:00:56] Finished processing user Joey's request, duration: 28 seconds. [2023-07-28 12:02:39] Finished processing user Rachel's request, duration: 32 seconds. So the servers’ request time has indeed increased. The next step would be to check the servers’ various indicators, like CPU, memory, load, etc. You should also append this information to the notes. You get the idea, I won’t go into details anymore. The writing process can guide you through fixing the issue. What’s more, you may find the notes useful someday in the future, I cannot tell you how many times I got valuable information about the past in previous TODO notes!\nAs for Note-Taking, What Counts as a Good TODO App/Scheme? Now you know why TODO notes are important and how to take them, the next question would be which TODO app we should use. But before making a choice, we may need to consider what features we want from a TODO app in terms of note-taking. In my view, three features are the most important:\nIt has to support adding notes for each TODO task. Since we are talking about notes, this feature is an obvious one. The notes should support text formatting like italics, code blocks, etc. This is because our notes could be complicated sometimes. We may need to write code blocks, headers, quotes, etc in the notes to make it easy to understand. It would be hard to take long notes without the feature. The whole TODO list should be stored in, or at least can be imported and exported to, a plain text format. By plain text format, I mean Markdown, Org Mode, etc. They are powerful enough to store multiple formats in a single text file. To be honest, this is not a must-have feature, but it’s nice to have. When your TODO list is stored in a plain text format, you can search for/edit anything you want with any editor, you will not be bound to a certain vendor product. How Does Each TODO App Do in Terms of Note-Taking? Now we have three requirements for TODO apps, let’s take a look at some well-known TODO apps and see how each of them does in this regard.\nMicrosoft To Do One of the most famous TODO apps is Microsoft To Do.\nMicrosoft To Do allows you to take notes for each task at the right bottom part of the UI (Found the “Add Note” part in the image above?). That’s enough for most people, but the notes can only be plain text, it doesn’t support quotes, code blocks, etc. So it’s not the perfect solution. Maybe Microsoft doesn’t want the app to be complicated. If the user needs to take notes with formatting elements (heading, bulleted lists), he/she can do this in other apps. Besides, you can only see/edit TODO tasks inside the app, there is no way to export the TODO list to a text file. So Microsoft To Do only supports the first feature.\nScore: ★★★☆☆\nTodoist Todoist is also a famous TODO management app, it seems to have more features than Microsoft To Do. You can try creating a TODO task and adding some notes to it, then you will immediately realize that the app surely supports the first two features - It supports Markdown in its TODO description/comments and renders it perfectly:\nIt doesn’t support importing/exporting the TODO list to a text file, but it supports the first two features perfectly.\nScore: ★★★★☆\nAgenda Agenda is built based on the idea that notes and dates should be combined together, which is closely aligned with ours. Strictly speaking, it’s not a TODO app, at least not a traditional one, the official website describes the app as Notes meets Calendar. But since it can set a date for a block of notes, you can use it as a TODO app with notes emphasized.\nAgenda has a premium feature that supports exporting the notes into markdown files. I haven’t bought Agenda so I don’t know how it does. But I guess it should work. So in summary, Agenda supports all the three features we mentioned above, which seems to be a great app worth trying.\nScore: ★★★★☆\nEmacs With Org Mode This is my favorite one. But a lot of people don’t know Emacs or Org Mode at all, maybe because it’s a niche product mainly used by programmers.\nFirst of all, Emacs and Org Mode are two separate things. Emacs is a highly-customizable text editor, just like Vim, while Org Mode is a markup language, just like Markdown. It’s not as popular as Markdown so a lot of people don’t know it. Theoretically, you can edit Org Mode documents with any editor, but most people choose Emacs because it has excellent support for Org Mode.\nOrg Mode has many attractive features that are not available in Markdown. Since we are talking about notes and TODO tasks, I’ll only highlight relevant features in Org Mode. In Markdown, we add a header with #. That’s similar in Org Mode, only that we use * instead of #. Moreover, You can add the TODO keyword after * in Org Mode to make it a TODO header, here is an example:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 * TODO Install Emacs in macOS ** DONE Install vanilla Emacs We can use ~brew~ to install vanilla Emacs, the command is as follows[fn:1]: #+begin_src sh brew update brew install emacs #+end_src ** TODO Install Doom Emacs Run the following command to install Doom Emacs[fn:2]: #+begin_src sh git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.config/emacs ~/.config/emacs/bin/doom install #+end_src * Footnotes [fn:1] [[https://orgmode.org/org.html#Installation][The official Org Mode website]] [fn:2] [[https://github.com/doomemacs/doomemacs][The Doom Emacs git repository]] Here is how it looks like in Emacs (You may get a different rendering effect depending on your Emacs configurations):\nIt’s just like Markdown, only using a different set of symbols. I won’t try to tell you all the meanings of those symbols, but you can guess. Here we created a top TODO task, which is to install Emacs on macOS. When we add this TODO task, we may know nothing about how to do that. After some investigations, we may find that we need to install two parts, the first is vanilla Emacs, and the second is Doom Emacs. Again, you don’t need to know what they are, the point is that we figured out we need to install two parts, so we need to create two sub-tasks under the main task. Then we list all the commands we need to run to install them. We can also attach the result to the notes (By the way, Emacs can run those commands directly in the notes!) so that whenever any error occurs, the result can be taken as a good reference for pinpointing the reason.\nIn the end, when we finished the first sub-task, we change the TODO keyword to DONE, just like we change - [ ] to - [X] in Markdown. It not only removes the TODO task from the TODO list but also gives us “a dose of dopamine” for finishing the task.\nAlthough Org Mode is great in many ways, few apps support Org Mode, and Emacs is almost the only app that supports all the features of Org Mode. Yes, you can edit Org Mode files in any editor you want. But if you want to do something with TODO tasks in Org Mode files, like checking TODO tasks scheduled at a certain date, or checking all the TODO tasks with the highest priority, Emacs might be your only option. And here comes its biggest problem: Emacs is not that easy to learn, even for professional programmers. That is a huge obstacle for ordinary people.\nEmacs with Org Mode supports all the three features mentioned above, but it’s hard to learn, which is a deal killer for most people, so I’ll only give it three stars, although it’s my favorite.\nScore: ★★★☆☆\nNow What Should I Choose? There are many TODO apps nowadays, and most of them support adding notes, only the degree of support varies. You may ask which one to choose, and my answer to that question would be: just pick one, don’t hesitate. In my view, the biggest problem is not that most TODO apps don’t have great support for notes. The biggest problem is that most people don’t know they should take notes for their TODO tasks. So just pick one TODO app, and start taking your TODO notes from today!\n","description":"","tags":null,"title":"Take Notes for Your Todo Tasks","uri":"/posts/take-notes-for-your-todo-tasks/"},{"categories":null,"content":"Introduction Recently I encountered a leetcode problem called Majority Element, there are multiple ways to solve it, the most efficient of them all is called the Boyer-Moore Majority Voting Algorithm, whose time complexity is $O(n)$ and space complexity is $O(1)$. There are many posts online talking about the algorithm, but most of them don’t give a concrete mathematical proof of it. So in this post, I try to explain the algorithm thoroughly, including not only its mechanism and intuition but also a mathematical proof.\nProblem Given an array nums of size $n$, return the majority element.\nThe majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.\nExample 1:\n1 2 Input: nums = [3,2,3] Output: 3 Example 2:\n1 2 Input: nums = [2,2,1,1,1,2,2] Output: 2 The Boyer-Moore Majority Voting Algorithm There are a lot of ways to solve the problem, but the method I’ll introduce today would be the most efficient one, its time complexity is $O(n)$, and space complexity is $O(1)$. It’s called the Boyer-Moore Majority Voting Algorithm. The code of the algorithm is pretty easy, although it’s not that easy to prove its correctness. Unlike before, I’ll show the code first, then walk through the process and prove its correctness later. I think you will better understand the algorithm this way.\nAs promised, this is the code, written in Java\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution { public int majorityElement(int[] nums) { int count = 0; int element = -1; for (int num : nums) { if (count == 0) { element = num; count = 1; } else if (element == num) { count++; } else { count--; } } return element; } } First, we create two variables count and element. The initial value of count is 0, and the initial value of element could be any, we choose -1 here. Then we iterate through the nums array. In each iteration, we decide our operation based on the current conditions, we have three choices:\nIf count is 0, then we assign num to element and reset count to 1. If element is equal to num, then we increase count by one. Otherwise we decrease count by one. At the end of the method, we return element. That’s all.\nTo see how the algorithm works, let’s suppose the nums array is [1, 3, 3, 2, 3] and go through the process step by step.\nAt first, count is 0, so we set element to 1 and count to 1. In the second iteration, the current number is 3, which is different from element 1, so decrease count to 0 In the third iteration, count is 0, so we set element to 3 and count to 1. In the fourth iteration, the current number 2 is different from element 3, so we decrease count to 0. In the last iteration, count is 0, so we set element to the current number 3 and set count to 1. In the end, we return element 3, which is the correct majority number.\nIntuition The intuition behind the algorithm is that count can be taken as a vote for element. When we encounter a different value from element, we decrease the vote, when we encounter the same value as element, we increase the vote, so in the end, the majority number will have the most votes and therefore win the contest.\nProof The above intuition is just helping you understand the problem, to prove its correctness, you need mathematical induction.\nFirst, we prove that the algorithm works when nums length is 1, which is obvious. Second, we assume that the algorithm works when nums length is less than n, we are going to prove its correctness when nums length is n. To prove the second statement, we need to discuss two conditions:\nThe first number is the majority The first number is not the majority. When the first number is the majority In the first iteration, element is the majority number, and count is 1. There are also two possibilities for the count value afterwards:\nIt never drops to 0. it drops to 0 in some iteration. For the former case, element will always be the majority number, and the return value is also the majority, so the algorithm works in this case. We will discuss the latter case in more detail. Before doing that, let’s first define some variables to help illustrate the point:\n$k$: count drops to 0 at the end of the $k$-th iteration. $n$: The length of nums. $m$: The majority number in nums. $c$: The number of $m$ in nums. For example, when nums = [2, 2, 3, 3, 5, 2, 2], the values of those variables are:\n$k = 4$ $n = 7$ $m = 2$ $c = 4$ We need to prove that in this case $m$ is also the majority number in the remaining $n - k$ numbers. To see the necessity of the proof you need to remember that we have an assumption that the algorithm works when nums length is less than $n$. So if $m$ is the majority number in the remaining $n - k$ numbers, the algorithm will correctly output the majority number $m$ after the remaining $n - k$ iterations, which means the algorithm will output $m$ after the whole $n$ iterations, which means the algorithm works in this case.\nBut how to prove that? We can use the following logic: Since count drops to 0 in the $k$-th iteration and the first number is $m$, we know that the number of $m$ in the first $k$ numbers is exactly $\\frac{k}{2}$. To prove $m$ is also the majority in the remaining $n - k$ numbers, we need to prove\n$$(c - \\frac{k}{2}) \\cdot 2 \u003e n - k \\label{1} \\tag{1}$$\nWhich is equivalent to\n$$2c - k \u003e n - k$$\nWhich is equivalent to\n$$2c \u003e n$$\nThat is true by the definition of $m$. So we know that the equation $\\eqref{1}$ holds, which means $m$ is the majority number in the remaining $n - k$ numbers. Following the previous logic said above, we know that the algorithm works when the first number is the majority.\nWhen the first number is not the majority Suppose the first number is $j$. Since $j$ is not the majority number, there has to be an iteration where count for $j$ becomes 0 for the first time, let’s say it happens at the end of the $k$-th iteration. As before, We define the following variables:\n$n$: The length of nums. $m$: The majority number in nums. $c$: The number of $m$ in nums. $a$: The number of $m$ in the first $k$ numbers. As before, we need to prove that $m$ is also the majority number in the remaining $n - k$ numbers, if we can do that, we will know that algorithm works when the first number is not the majority. Proving it is equal to proving the following equation:\n$$2 \\cdot (c - a) \u003e n - k \\label{2} \\tag{2}$$\nTo prove the equation, we first need to know that $a \\le \\frac{k}{2}$, because if $a \u003e \\frac{k}{2}$, then count would be greater than 0 at the end of the $k$-th iteration. Also, notice that we have $2c \u003e n$ by the definition of $m$. Now we have two equations, let’s write them here:\n$$a \\le \\frac{k}{2}$$\n$$2c \u003e n$$\nMultiply both sides of the first equation by $-2$ we get $-2a \\ge -k$, then we add it to $2c \u003en$, after that we get\n$$2c - 2a \u003e n - k$$\nThat is equivalent to\n$$2 \\cdot (c - a) \u003e n - k$$\nYes, that’s equation $\\eqref{2}$, and we proved it. Following the previous logic, proving it means that the algorithm works when the first number is not the majority.\nPut everything together In conclusion, we know that the algorithm works when nums length is $n$. From the mathematical induction given before, we know that the algorithm works for any nums that have a majority. Q.E.D.\n","description":"","tags":null,"title":"Find the Majority Element Using the Boyer-Moore Majority Voting Algorithm","uri":"/posts/find-the-majority-element-using-the-boyer-moore-majority-voting-algorithm/"}]
